from core.services.coreservices import CoreService, ServiceMode
import os
import subprocess
from pathlib import Path


class FlinkClusterService(CoreService):
    """
    """

    name = "FlinkClusterService"
    group = "BDAPRO"
    executables = ()
    dependencies = ()
    dirs = ()
    configs = ("flink_cluster.sh",)
    startup = ("sh flink_cluster.sh",)
    validate = ()
    validation_mode = ServiceMode.NON_BLOCKING
    validation_timer = 5
    validation_period = 0.5
    shutdown = ()

    @classmethod
    def on_load(cls):
        """
         starts a Flink cluster (Starts a Job Manager on the local node, connects via SSH to all worker nodes in the
         slave file to start task manager on each node.

        :return: nothing
        """
        pass

    @classmethod
    def generate_config(cls, node, filename):
        """
        Returns a string representation for a file, given the node the service is starting on the config filename
        that this information will be used for. This must be defined, if "configs" are defined.

        :param node: core node that the service is being ran on
        :param str filename: configuration file to generate
        :return: configuration file content
        :rtype: str
        """
        # FLINK_PATH = os.path.join(os.path.expanduser('~'),'home','yiminggu','flink-1.10.1')
        FLINK_PATH = os.path.join(os.path.expanduser('~'), 'flink-1.10.1')
        # subprocess.run(os.path.join(FLINK_PATH,'bin/start-cluster.sh'), shell=True)

        cfg = "#!/bin/sh\n"
        cfg += "#auto-generated by FlinkClusterService (flink_cluster.py)\n"
        cfg += "set -x\n"
        cfg += os.path.join(FLINK_PATH, 'bin/start-cluster.sh')

        return cfg
