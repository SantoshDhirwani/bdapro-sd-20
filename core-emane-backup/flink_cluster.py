import time

from core.services.coreservices import CoreService, ServiceMode
import os
import subprocess
from pathlib import Path


class FlinkClusterService(CoreService):
    """
    """

    name = "FlinkClusterService"
    group = "BDAPRO"
    executables = ()
    dependencies = ()
    dirs = ()
    configs = ("flink_cluster_start.sh", "flink_cluster_stop.sh")
    startup = ("sh flink_cluster_start.sh",)
    validate = ()
    validation_mode = ServiceMode.NON_BLOCKING
    validation_timer = 5
    validation_period = 0.5
    shutdown = ("sh flink_cluster_stop.sh",)

    @classmethod
    def on_load(cls):
        """

        :return: nothing
        """
        pass

    @classmethod
    def generate_config(cls, node, filename):
        """
        Returns a string representation for a file, given the node the service is starting on the config filename
        that this information will be used for. This must be defined, if "configs" are defined.

        :param node: core node that the service is being ran on
        :param str filename: configuration file to generate
        :return: configuration file content
        :rtype: str
        """
        # FLINK_PATH = os.path.join(os.path.expanduser('~'),'home','yiminggu','flink-1.10.1')
        # FLINK_PATH = os.path.join(os.path.expanduser('~'), 'flink-1.10.1')
        # FLINK_PATH = os.path.join('home', 'kevingu', 'Downloads', 'BDAPRO', 'flink-1.10.1')
        # subprocess.run(os.path.join(FLINK_PATH,'bin/start-cluster.sh'), shell=True)

        timestamp = time.strftime('%H:%M:%S')
        cfg = "#!/bin/sh\n"
        if filename == cls.configs[0]:
            cfg += "#auto-generated by FlinkClusterService (flink_cluster.py)\n"
            cfg += "export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\n"
            cfg += "sudo service ssh restart\n"
            cfg += "#runuser -l kevingu -c '/home/kevingu/Downloads/BDAPRO/flink-1.10.1/bin/start-cluster.sh'\n"
            cfg += f"echo '{timestamp} - Started Flink Cluster on Node: {node.name}' >> /home/kevingu/Desktop/service_logs/cluster_log\n"
            # cfg += os.path.join(FLINK_PATH, 'bin/start-cluster.sh')
        elif filename == cls.configs[1]:
            cfg += "#runuser -l kevingu -c '/home/kevingu/Downloads/BDAPRO/flink-1.10.1/bin/stop-cluster.sh'\n"
            cfg += f"echo '{timestamp} - Stopped Flink Cluster on Node: {node.name}' >> /home/kevingu/Desktop/service_logs/cluster_log"
        return cfg