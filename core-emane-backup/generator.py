from core.services.coreservices import CoreService, ServiceMode
import subprocess


class GeneratorService(CoreService):
    """
    """

    name = "GeneratorService"
    group = "BDAPRO"
    executables = ()
    dependencies = ()
    dirs = ()
    configs = ("generator.sh",)
    startup = ("sh generator.sh",)
    validate = ()
    validation_mode = ServiceMode.NON_BLOCKING
    validation_timer = 5
    validation_period = 0.5
    shutdown = ()

    @classmethod
    def on_load(cls):
        """
        Provides a way to run some arbitrary logic when the service is loaded, possibly to help facilitate
        dynamic settings for the environment.

        :return: nothing
        """
        pass

    @classmethod
    def generate_config(cls, node, filename):
        """
        Returns a string representation for a file, given the node the service is starting on the config filename
        that this information will be used for. This must be defined, if "configs" are defined.

        :param node: core node that the service is being ran on
        :param str filename: configuration file to generate
        :return: configuration file content
        :rtype: str
        """
        cfg = "#!/bin/sh\n"
        cfg += "#auto-generated by GeneratorService (generator.py)\n"
        cfg += "set -x\n"
        cfg += "java -cp /home/kevingu/Downloads/BDAPRO/InputGenerator/build/libs/InputGenerator-1.0-SNAPSHOT.jar de.adrian.thesis.generator.benchmark.netty.NettyBenchmark /home/kevingu/Downloads/BDAPRO/InputGenerator/build/resources/main/log4j2.xml -p 31000"

        return cfg

    # subprocess.run('java -cp /home/yiminggu/InputGenerator/build/libs/InputGenerator-1.0-SNAPSHOT.jar de.adrian.thesis.generator.benchmark.netty.NettyBenchmark /home/yiminggu/InputGenerator/build/resources/main/log4j2.xml -p 31000', shell=True)
